#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const watch = require('watch');
const swarmConfig = require('../swarm.json');

// promise based middlewares
const log = require('./lib/log');
const files = require('./lib/files');
const sync = require('./lib/sync');
const servers = require('./lib/servers');

// local watch
function watchLocal(srcDirectory, watchOptions) {
  watch.createMonitor(srcDirectory, watchOptions, function(monitor) {
    monitor.on('created', function(filename, stats) {
      files.get(filename)
        .then(file => {
          return servers
            .all(server => sync.send(file, server))
            .then(() => log.sendCreateSuccess(file));
        })
        .catch(err => console.error(err.stack));
    });

    monitor.on('changed', function(filename, stats) {
      files.get(filename)
        .then(file => {
          return servers
            .all(server => sync.send(file, server))
            .then(() => log.sendUpdateSuccess(file));
        })
        .catch(err => console.error(err.stack));
    });

    monitor.on('removed', function(filename, stats) {
      files.get(filename)
        .then(file => {
          return servers
            .all(server => sync.delete(file, server))
            .then(() => log.sendDeleteSuccess(file));
        })
        .catch(err => console.error(err.stack));
    });
  });
}

function deploy(srcDirectory, ignoreRegExp) {
  const srcFiles = fs.readdirSync(srcDirectory);

  srcFiles.forEach(filename => {
    files.get(filename)
      .then(file => files.filter(file, ignoreRegExp))
      .then(file => {
        return servers
          .all(server => sync.send(file, server))
          .then(() => log.sendUpdateSuccess(file));
      }, (file) => {
        console.log('reject', file.rel)
      })
      .catch(err => console.error(err.stack));
  })
}

/* --------------------------------------------------------------------------
 * Process and execute the given command.
 * -------------------------------------------------------------------------- */

const cwd = process.cwd();

// files that should not be synced
const ignoreRegExp = /node_modules|npm-debug.log|\.git|\.DS_Store|package-lock.json/;

const watchOptions = {
  ignoreDotFiles: false,
  ignoreUnreadableDir: true,
  ignoreNotPermitted: true,
  interval: 2,
  filter: (path) => !(ignoreRegExp.test(path)),
};

const command = process.argv[2];
servers.configure(swarmConfig.devices);

switch (command) {
  case '--deploy':
    // throw new Error('disabled command: fix recursive `node_modules` filtering');
    deploy(cwd, ignoreRegExp);
    break;
  // keep file system in sync with remote servers
  case '--watch':
    watchLocal(cwd, watchOptions);
    break;
}

/* --------------------------------------------------------------------------
 * -------------------------------------------------------------------------- */

